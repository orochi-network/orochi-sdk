/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common';

export declare namespace IOrandStorage {
  export type EpochProofStruct = {
    y: PromiseOrValue<BigNumberish>;
    gamma: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    c: PromiseOrValue<BigNumberish>;
    s: PromiseOrValue<BigNumberish>;
    uWitness: PromiseOrValue<string>;
    cGammaWitness: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    sHashWitness: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    zInv: PromiseOrValue<BigNumberish>;
  };

  export type EpochProofStructOutput = [
    BigNumber,
    [BigNumber, BigNumber],
    BigNumber,
    BigNumber,
    string,
    [BigNumber, BigNumber],
    [BigNumber, BigNumber],
    BigNumber,
  ] & {
    y: BigNumber;
    gamma: [BigNumber, BigNumber];
    c: BigNumber;
    s: BigNumber;
    uWitness: string;
    cGammaWitness: [BigNumber, BigNumber];
    sHashWitness: [BigNumber, BigNumber];
    zInv: BigNumber;
  };
}

export interface OrandProviderV1Interface extends utils.Interface {
  functions: {
    'checkProofSigner(bytes)': FunctionFragment;
    'getECVRFVerifier()': FunctionFragment;
    'getNonce(address)': FunctionFragment;
    'getOperator()': FunctionFragment;
    'getPreviousAlpha(address)': FunctionFragment;
    'getPublicKey()': FunctionFragment;
    'owner()': FunctionFragment;
    'publish(bytes,(uint256,uint256[2],uint256,uint256,address,uint256[2],uint256[2],uint256))': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setNewECVRFVerifier(address)': FunctionFragment;
    'setOperator(address)': FunctionFragment;
    'setPublicKey(bytes)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'checkProofSigner'
      | 'getECVRFVerifier'
      | 'getNonce'
      | 'getOperator'
      | 'getPreviousAlpha'
      | 'getPublicKey'
      | 'owner'
      | 'publish'
      | 'renounceOwnership'
      | 'setNewECVRFVerifier'
      | 'setOperator'
      | 'setPublicKey'
      | 'transferOwnership',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'checkProofSigner', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'getECVRFVerifier', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNonce', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getOperator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPreviousAlpha', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getPublicKey', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'publish',
    values: [PromiseOrValue<BytesLike>, IOrandStorage.EpochProofStruct],
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setNewECVRFVerifier', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setOperator', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setPublicKey', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'checkProofSigner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getECVRFVerifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNonce', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPreviousAlpha', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPublicKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'publish', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNewECVRFVerifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPublicKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;

  events: {
    'NewEpoch(address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'SetNewECVRFVerifier(address,address)': EventFragment;
    'SetNewOperator(address,address)': EventFragment;
    'SetNewPublicKey(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'NewEpoch'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetNewECVRFVerifier'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetNewOperator'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetNewPublicKey'): EventFragment;
}

export interface NewEpochEventObject {
  receiverAddress: string;
  receiverNonce: BigNumber;
  randomness: BigNumber;
}
export type NewEpochEvent = TypedEvent<[string, BigNumber, BigNumber], NewEpochEventObject>;

export type NewEpochEventFilter = TypedEventFilter<NewEpochEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface SetNewECVRFVerifierEventObject {
  actor: string;
  ecvrfAddress: string;
}
export type SetNewECVRFVerifierEvent = TypedEvent<[string, string], SetNewECVRFVerifierEventObject>;

export type SetNewECVRFVerifierEventFilter = TypedEventFilter<SetNewECVRFVerifierEvent>;

export interface SetNewOperatorEventObject {
  oldOperator: string;
  newOperator: string;
}
export type SetNewOperatorEvent = TypedEvent<[string, string], SetNewOperatorEventObject>;

export type SetNewOperatorEventFilter = TypedEventFilter<SetNewOperatorEvent>;

export interface SetNewPublicKeyEventObject {
  actor: string;
  pkx: BigNumber;
  pky: BigNumber;
}
export type SetNewPublicKeyEvent = TypedEvent<[string, BigNumber, BigNumber], SetNewPublicKeyEventObject>;

export type SetNewPublicKeyEventFilter = TypedEventFilter<SetNewPublicKeyEvent>;

export interface OrandProviderV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrandProviderV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkProofSigner(
      proof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, string] & {
        signer: string;
        receiverNonce: BigNumber;
        receiverAddress: string;
      }
    >;

    getECVRFVerifier(overrides?: CallOverrides): Promise<[string]>;

    getNonce(receiverAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getOperator(overrides?: CallOverrides): Promise<[string]>;

    getPreviousAlpha(receiverAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPublicKey(overrides?: CallOverrides): Promise<[[BigNumber, BigNumber]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    publish(
      proof: PromiseOrValue<BytesLike>,
      newEpoch: IOrandStorage.EpochProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setNewECVRFVerifier(
      ecvrfAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOperator(
      operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPublicKey(
      pk: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  checkProofSigner(
    proof: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, string] & {
      signer: string;
      receiverNonce: BigNumber;
      receiverAddress: string;
    }
  >;

  getECVRFVerifier(overrides?: CallOverrides): Promise<string>;

  getNonce(receiverAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getOperator(overrides?: CallOverrides): Promise<string>;

  getPreviousAlpha(receiverAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getPublicKey(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  owner(overrides?: CallOverrides): Promise<string>;

  publish(
    proof: PromiseOrValue<BytesLike>,
    newEpoch: IOrandStorage.EpochProofStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setNewECVRFVerifier(
    ecvrfAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOperator(
    operatorAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPublicKey(
    pk: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    checkProofSigner(
      proof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, string] & {
        signer: string;
        receiverNonce: BigNumber;
        receiverAddress: string;
      }
    >;

    getECVRFVerifier(overrides?: CallOverrides): Promise<string>;

    getNonce(receiverAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getOperator(overrides?: CallOverrides): Promise<string>;

    getPreviousAlpha(receiverAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getPublicKey(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    owner(overrides?: CallOverrides): Promise<string>;

    publish(
      proof: PromiseOrValue<BytesLike>,
      newEpoch: IOrandStorage.EpochProofStruct,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setNewECVRFVerifier(ecvrfAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setOperator(operatorAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    setPublicKey(pk: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'NewEpoch(address,uint256,uint256)'(
      receiverAddress?: PromiseOrValue<string> | null,
      receiverNonce?: PromiseOrValue<BigNumberish> | null,
      randomness?: PromiseOrValue<BigNumberish> | null,
    ): NewEpochEventFilter;
    NewEpoch(
      receiverAddress?: PromiseOrValue<string> | null,
      receiverNonce?: PromiseOrValue<BigNumberish> | null,
      randomness?: PromiseOrValue<BigNumberish> | null,
    ): NewEpochEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'SetNewECVRFVerifier(address,address)'(
      actor?: PromiseOrValue<string> | null,
      ecvrfAddress?: PromiseOrValue<string> | null,
    ): SetNewECVRFVerifierEventFilter;
    SetNewECVRFVerifier(
      actor?: PromiseOrValue<string> | null,
      ecvrfAddress?: PromiseOrValue<string> | null,
    ): SetNewECVRFVerifierEventFilter;

    'SetNewOperator(address,address)'(
      oldOperator?: PromiseOrValue<string> | null,
      newOperator?: PromiseOrValue<string> | null,
    ): SetNewOperatorEventFilter;
    SetNewOperator(
      oldOperator?: PromiseOrValue<string> | null,
      newOperator?: PromiseOrValue<string> | null,
    ): SetNewOperatorEventFilter;

    'SetNewPublicKey(address,uint256,uint256)'(
      actor?: PromiseOrValue<string> | null,
      pkx?: PromiseOrValue<BigNumberish> | null,
      pky?: PromiseOrValue<BigNumberish> | null,
    ): SetNewPublicKeyEventFilter;
    SetNewPublicKey(
      actor?: PromiseOrValue<string> | null,
      pkx?: PromiseOrValue<BigNumberish> | null,
      pky?: PromiseOrValue<BigNumberish> | null,
    ): SetNewPublicKeyEventFilter;
  };

  estimateGas: {
    checkProofSigner(proof: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getECVRFVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(receiverAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getOperator(overrides?: CallOverrides): Promise<BigNumber>;

    getPreviousAlpha(receiverAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getPublicKey(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    publish(
      proof: PromiseOrValue<BytesLike>,
      newEpoch: IOrandStorage.EpochProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setNewECVRFVerifier(
      ecvrfAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOperator(
      operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPublicKey(
      pk: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkProofSigner(proof: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getECVRFVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNonce(receiverAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPreviousAlpha(receiverAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPublicKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publish(
      proof: PromiseOrValue<BytesLike>,
      newEpoch: IOrandStorage.EpochProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setNewECVRFVerifier(
      ecvrfAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOperator(
      operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPublicKey(
      pk: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
